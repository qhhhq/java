<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<dubbo:application name="demotest-consumer" owner="programmer"
		organization="dubbox" />
	<!--向 zookeeper 订阅 provider 的地址，由 zookeeper 定时推送 -->
	<dubbo:registry address="zookeeper://localhost:2181" />
	<!--使用 dubbo 协议调用定义好的 api.PermissionService 接口 -->
	<!-- <dubbo:reference id="areaService" interface="net.qhhhq.api.common.AreaService" />
	<dubbo:reference id="merachantTypeService"
		interface="net.qhhhq.merachant.api.MerachantTypeService" />
	<dubbo:reference id="merachantService"
		interface="net.qhhhq.merachant.api.MerachantService" />
	<dubbo:reference id="merachantLoginService"
		interface="net.qhhhq.merachant.api.MerachantLoginService" />
	<dubbo:reference id="merachantContactService"
		interface="net.qhhhq.merachant.api.MerachantContactService" /> -->

	<bean id="httpServer" class="net.qhhhq.server.netty.NettyHTTPServer"
		destroy-method="stopServer">
		<constructor-arg ref="httpConfig" />
		<constructor-arg ref="httpChannelInitializer" />
	</bean>

	<bean id="httpChannelInitializer" class="net.qhhhq.server.netty.HttpChannelInitializer" />

	<bean id="httpConfig" class="net.qhhhq.server.netty.NettyConfig">
		<property name="channelOptions" ref="httpChannelOptions" />
		<property name="bossGroup" ref="bossGroup" />
		<property name="workerGroup" ref="workerGroup" />
		<property name="portNumber" value="10086" />
	</bean>

	<util:map id="httpChannelOptions" map-class="java.util.HashMap">
		<entry>
			<key>
				<util:constant static-field="io.netty.channel.ChannelOption.SO_KEEPALIVE" />
			</key>
			<value type="java.lang.Boolean">true</value>
		</entry>
		<entry>
			<key>
				<util:constant static-field="io.netty.channel.ChannelOption.SO_BACKLOG" />
			</key>
			<value type="java.lang.Integer">100</value>
		</entry>
	</util:map>

	<bean id="bossGroup" class="io.netty.channel.nio.NioEventLoopGroup"
		destroy-method="shutdownGracefully">
		<constructor-arg type="int" index="0" value="2" />
		<constructor-arg index="1" ref="bossThreadFactory" />
	</bean>

	<bean id="workerGroup" class="io.netty.channel.nio.NioEventLoopGroup"
		destroy-method="shutdownGracefully">
		<constructor-arg type="int" index="0" value="8" />
		<constructor-arg index="1" ref="workerThreadFactory" />
	</bean>

	<bean id="bossThreadFactory" class="net.qhhhq.server.netty.factory.NamedThreadFactory">
		<constructor-arg type="java.lang.String" value="Server-Boss" />
	</bean>

	<bean id="workerThreadFactory" class="net.qhhhq.server.netty.factory.NamedThreadFactory">
		<constructor-arg type="java.lang.String" index="0"
			value="Server-Worker" />
	</bean>

	<bean id="handlerChainFactory" class="net.qhhhq.service.common.impl.HandlerChainFactory">
	    <property name="handlers">
	        <list>
	        	<bean class="net.qhhhq.service.base.DataInitService" />
	        	<bean class="net.qhhhq.service.base.BaseCheckService" />
	            <bean class="net.qhhhq.service.area.AreaServiceBean" />
	        </list>
	    </property>
	</bean>

	<!-- 使用注解方式暴露接口 -->
	<dubbo:annotation package="net.qhhhq.service" />
	<!-- 加入spring注解扫描 -->
	<context:component-scan base-package="net.qhhhq.service" />
</beans>