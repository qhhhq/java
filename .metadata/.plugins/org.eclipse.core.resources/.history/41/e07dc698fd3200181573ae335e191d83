package net.qhhhq.server.netty.initializer;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyManagementException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.security.cert.CertificateException;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLEngine;

import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.socket.SocketChannel;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpServerCodec;
import io.netty.handler.ssl.SslHandler;
import io.netty.handler.stream.ChunkedWriteHandler;
import net.qhhhq.server.netty.handler.HttpServerHandler;
import net.qhhhq.utils.SslUtil;

public class HttpChannelInitializer extends ChannelInitializer<SocketChannel> {

	private String keyStorePath;
	private String keyPassword;

	@Override
	protected void initChannel(SocketChannel ch) throws Exception {
        SSLContext sslContext = SslUtil.createSSLContext("JKS",keyStorePath ,keyPassword);
       System.out.println(sslContext);
        SSLEngine sslEngine = sslContext.createSSLEngine();
        sslEngine.setUseClientMode(false);
        sslEngine.setNeedClientAuth(false);
		ChannelPipeline pipeline = ch.pipeline();
        pipeline.addLast("ssl", new SslHandler(sslEngine));
		pipeline.addLast(new HttpServerCodec());
        pipeline.addLast( new HttpObjectAggregator(1024*100));
        pipeline.addLast(new ChunkedWriteHandler());
//      pipeline.addLast(new HttpRequestDecoder());
        pipeline.addLast(
                new HttpServerHandler());
	}

	/**
	 * ssl
	 * @param pipeline
	 */
	private void addSSL(ChannelPipeline pipeline) {
		 try {
			SSLContext sslcontext = SSLContext.getInstance("TLS");
			KeyStore ks = KeyStore.getInstance("JKS");
			InputStream ksInputStream = new FileInputStream("/home/guogangj/gornix.jks");
			ks.load(ksInputStream, "123456".toCharArray());
			KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());
			kmf.init(ks, "654321".toCharArray());
			SSLContext sslContext = SSLContext.getInstance("TLS");
			sslContext.init(kmf.getKeyManagers(), null, null);
			SSLEngine sslEngine = sslContext.createSSLEngine();
			sslEngine.setUseClientMode(false);
			sslEngine.setNeedClientAuth(false);
			pipeline.addLast("ssl", new SslHandler(sslEngine));
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (KeyStoreException e) {
			e.printStackTrace();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (CertificateException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (UnrecoverableKeyException e) {
			e.printStackTrace();
		} catch (KeyManagementException e) {
			e.printStackTrace();
		}
	}

	public String getKeyStorePath() {
		return keyStorePath;
	}

	public void setKeyStorePath(String keyStorePath) {
		this.keyStorePath = keyStorePath;
	}

	public String getKeyPassword() {
		return keyPassword;
	}

	public void setKeyPassword(String keyPassword) {
		this.keyPassword = keyPassword;
	}

}
