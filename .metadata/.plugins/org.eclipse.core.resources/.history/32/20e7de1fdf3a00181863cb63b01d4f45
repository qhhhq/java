package net.qhhhq.service.http.qcloud;

import java.io.IOException;
import java.net.URISyntaxException;
import java.security.InvalidAlgorithmParameterException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.stereotype.Component;

import com.alibaba.dubbo.config.annotation.Reference;

import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker;
import io.netty.handler.codec.http.websocketx.WebSocketServerHandshakerFactory;
import net.qhhhq.service.common.HandlerChain;
import net.qhhhq.service.common.HttpRequestHandler;

@Component
public class TunnelConnectionServiceBean implements HttpRequestHandler {

	private static Logger log = Logger.getLogger(TunnelConnectionServiceBean.class);
	private WebSocketServerHandshaker handshaker;

	public void handle(Map<String, Object> paramMap, HandlerChain paramHandlerChain, JSONObject data) {
		ChannelHandlerContext ctx = (ChannelHandlerContext) paramMap.get("ctx");
		FullHttpRequest fhr = (FullHttpRequest) paramMap.get("fhr");
		String uri = fhr.uri();
		log.info("TunnelConnectionServiceBean start ......"+ uri);
		if(fhr != null && uri != null && uri.equals("/get/wsurl")) {
			String tunnelId = UUID.randomUUID().toString().replaceAll("-", "");
			String connectUrl = "ws://10.255.105.225:80";
			WebSocketServerHandshakerFactory wsFactory = new WebSocketServerHandshakerFactory(
					connectUrl, null, false);
			handshaker = wsFactory.newHandshaker(fhr);
			if (handshaker == null) {
				WebSocketServerHandshakerFactory.sendUnsupportedVersionResponse(ctx.channel());
			} else {
				handshaker.handshake(ctx.channel(), fhr);
			}
			data.put("tunnelId", tunnelId);
			data.put("connectUrl", connectUrl);
		}
		paramHandlerChain.doHandler(paramMap);
	}

}
