package net.qhhhq.service.http.qcloud;

import java.io.IOException;
import java.net.URISyntaxException;
import java.security.InvalidAlgorithmParameterException;
import java.util.HashMap;
import java.util.Map;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.stereotype.Component;

import com.alibaba.dubbo.config.annotation.Reference;
import com.qcloud.weapp.authorization.Constants;

import io.netty.handler.codec.http.HttpHeaders;
import net.qhhhq.api.user.UserService;
import net.qhhhq.http.HttpClient;
import net.qhhhq.http.JsonResponseHandler;
import net.qhhhq.model.user.UserInfo;
import net.qhhhq.service.common.HandlerChain;
import net.qhhhq.service.common.HttpRequestHandler;
import net.qhhhq.utils.AES;

@Component
public class LoginService implements HttpRequestHandler {

	private static Logger log = Logger.getLogger(LoginService.class);

	@Reference
	static UserService userService;

	public void handle(Map<String, Object> paramMap, HandlerChain paramHandlerChain, JSONObject data) {
		log.info(paramMap.get("uri"));
		if(paramMap.get("uri") != null && paramMap.get("uri").equals("/login")) {		//登录
			HttpHeaders headers = (HttpHeaders) paramMap.get("headers");
			String code = headers.get(Constants.WX_HEADER_CODE);
			String encryptedData = headers.get(Constants.WX_HEADER_ENCRYPTED_DATA);
			String iv = headers.get(Constants.WX_HEADER_IV);
			try {
				JSONObject open = getOpenId(code);
				String openId = open.getString("openid");
				byte[] resultByte  = AES.decrypt(Base64.decodeBase64(encryptedData),
	                    Base64.decodeBase64(open.getString("session_key")),
	                    Base64.decodeBase64(iv));
	                if(null != resultByte && resultByte.length > 0){
	                    String strUser = new String(resultByte, "UTF-8");
	            		JSONObject json = prepareResponseJson();
	            		JSONObject session = new JSONObject();
	            		JSONObject userInfo = null;

	        			session.put("id", loginResult.get("id"));
	        			session.put("skey", loginResult.get("skey"));
	        			json.put("session", session);
	                } else {
	                	log.error("用户信息解密失败");
	                }
			} catch (URISyntaxException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} catch (InvalidAlgorithmParameterException e) {
				e.printStackTrace();
			} catch (JSONException e) {
				e.printStackTrace();
			}
		}

		paramHandlerChain.doHandler(paramMap);
	}

	private long save(String strUser) {
		UserInfo user = new UserInfo();
		JSONObject userJson = new JSONObject(strUser);
		if(userJson.has("openId")) {
			String openId = userJson.getString("openId");
			if(!userService.hasOpenId()) {
				user.setOpenid(openId);
				if(open.has("unionid"))
					user.setUnionid(open.getString("unionid"));
				user.setAvatarurl(userJson.getString("avatarUrl"));
				user.setCity(userJson.getString("city"));
				user.setCountry(userJson.getString("country"));
				user.setGender(String.valueOf(userJson.getInt("gender")));
				user.setLanguage(userJson.getString("language"));
				user.setNickname(userJson.getString("nickName"));
				user.setProvince(userJson.getString("province"));
				userService.save(user);
			}
		}
	}


	private JSONObject prepareResponseJson() {
		JSONObject json = new JSONObject();
		try {
			json.put(Constants.WX_SESSION_MAGIC_ID, 1);
		} catch (JSONException e) {
			e.printStackTrace();
		}
		return json;
	}


	/**
	 * 获取openid和session_key
	 * @param code
	 * @return
	 * @throws URISyntaxException
	 * @throws IOException
	 */
	private JSONObject getOpenId(String code) throws URISyntaxException, IOException {
		Map<String, String> params = new HashMap<String, String>();
		params.put("appid", "wx275a30f644ebc4c9");
		params.put("secret", "ae0c581b7a6bf0792c87d00a1a8a1d9b");
		params.put("js_code", code);
		params.put("grant_type", "authorization_code");
		JsonResponseHandler handler = new JsonResponseHandler();
		Object obj = HttpClient.doGet("https://api.weixin.qq.com/sns/jscode2session", params, handler);
		JSONObject json = (JSONObject) obj;
		return json;
	}

}
